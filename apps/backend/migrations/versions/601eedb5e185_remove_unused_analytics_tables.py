"""Remove unused analytics tables

Revision ID: 601eedb5e185
Revises: 974851711be6
Create Date: 2025-09-03 10:32:16.364598

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '601eedb5e185'
down_revision = '974851711be6'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('system_analytics')
    op.drop_table('templates')
    op.drop_table('research_progress')
    op.drop_table('model_performance')
    op.drop_table('user_analytics')
    op.drop_table('export_history')
    op.drop_table('language_metrics')
    with op.batch_alter_table('audio_files', schema=None) as batch_op:
        batch_op.drop_constraint('audio_files_created_by_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('audio_files_updated_by_id_fkey', type_='foreignkey')
        batch_op.drop_column('created_by_email')
        batch_op.drop_column('created_by_id')
        batch_op.drop_column('updated_by_email')
        batch_op.drop_column('updated_by_id')

    with op.batch_alter_table('transcription_segments', schema=None) as batch_op:
        batch_op.drop_constraint('transcription_segments_updated_by_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('transcription_segments_created_by_id_fkey', type_='foreignkey')
        batch_op.drop_column('created_by_email')
        batch_op.drop_column('created_by_id')
        batch_op.drop_column('updated_by_email')
        batch_op.drop_column('updated_by_id')

    with op.batch_alter_table('transcriptions', schema=None) as batch_op:
        batch_op.drop_constraint('transcriptions_created_by_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('transcriptions_updated_by_id_fkey', type_='foreignkey')
        batch_op.drop_column('created_by_email')
        batch_op.drop_column('created_by_id')
        batch_op.drop_column('updated_by_email')
        batch_op.drop_column('updated_by_id')

    with op.batch_alter_table('user_sessions', schema=None) as batch_op:
        batch_op.drop_constraint('user_sessions_updated_by_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('user_sessions_created_by_id_fkey', type_='foreignkey')
        batch_op.drop_column('created_by_email')
        batch_op.drop_column('created_by_id')
        batch_op.drop_column('updated_by_email')
        batch_op.drop_column('updated_by_id')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint('users_updated_by_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('users_created_by_id_fkey', type_='foreignkey')
        batch_op.drop_column('created_by_email')
        batch_op.drop_column('created_by_id')
        batch_op.drop_column('updated_by_email')
        batch_op.drop_column('updated_by_id')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('updated_by_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_by_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('users_created_by_id_fkey', 'users', ['created_by_id'], ['id'])
        batch_op.create_foreign_key('users_updated_by_id_fkey', 'users', ['updated_by_id'], ['id'])

    with op.batch_alter_table('user_sessions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('updated_by_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_by_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('user_sessions_created_by_id_fkey', 'users', ['created_by_id'], ['id'])
        batch_op.create_foreign_key('user_sessions_updated_by_id_fkey', 'users', ['updated_by_id'], ['id'])

    with op.batch_alter_table('transcriptions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('updated_by_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_by_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('transcriptions_updated_by_id_fkey', 'users', ['updated_by_id'], ['id'])
        batch_op.create_foreign_key('transcriptions_created_by_id_fkey', 'users', ['created_by_id'], ['id'])

    with op.batch_alter_table('transcription_segments', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('updated_by_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_by_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('transcription_segments_created_by_id_fkey', 'users', ['created_by_id'], ['id'])
        batch_op.create_foreign_key('transcription_segments_updated_by_id_fkey', 'users', ['updated_by_id'], ['id'])

    with op.batch_alter_table('audio_files', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('updated_by_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_by_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('audio_files_updated_by_id_fkey', 'users', ['updated_by_id'], ['id'])
        batch_op.create_foreign_key('audio_files_created_by_id_fkey', 'users', ['created_by_id'], ['id'])

    op.create_table('language_metrics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('language_code', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('total_words_processed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('unique_words_discovered', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('out_of_vocabulary_words', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('average_word_length', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('average_sentence_length', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('diacritics_detected', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('diacritics_correctly_placed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('morphological_variants_detected', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('proper_nouns_detected', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('technical_terms_detected', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('character_accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('word_accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sentence_accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('semantic_accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('phoneme_accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('stress_pattern_accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('syllable_boundary_accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('frequent_error_patterns', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('challenging_phonemes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('improvement_suggestions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('data_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='language_metrics_pkey'),
    sa.UniqueConstraint('language_code', 'date', name='uq_language_metrics_lang_date')
    )
    op.create_table('export_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('original_filename', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('export_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('format', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('report_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('date_range_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('date_range_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('selected_sections', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('generation_parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('download_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_downloaded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('language', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('generation_time_seconds', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('data_points_included', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_pages', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='export_history_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='export_history_pkey')
    )
    op.create_table('user_analytics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('transcriptions_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_audio_duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_processing_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('average_accuracy_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_words_transcribed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('whisper_usage_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('wav2vec_usage_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('comparison_usage_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('voice_notes_created', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('voice_notes_transcribed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('research_sessions', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exports_generated', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('analysis_reports_viewed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('average_whisper_wer', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('average_wav2vec_wer', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('greek_accuracy_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('whisper_avg_processing_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('wav2vec_avg_processing_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('data_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_analytics_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_analytics_pkey'),
    sa.UniqueConstraint('user_id', 'date', name='uq_user_analytics_user_date')
    )
    op.create_table('model_performance',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('model_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('language', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('success_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('failure_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('average_wer', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('average_cer', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('average_processing_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('average_confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('diacritic_accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('morphology_accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('proper_noun_accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('technical_term_accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('average_audio_duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('audio_quality_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('background_noise_level', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('average_memory_usage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('average_cpu_usage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('average_gpu_usage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('common_errors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_patterns', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('data_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='model_performance_pkey'),
    sa.UniqueConstraint('model_name', 'date', 'language', name='uq_model_performance_unique')
    )
    op.create_table('research_progress',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('research_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('milestone_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('milestone_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('target_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('completion_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('completion_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('thesis_chapter', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('research_question', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('methodology_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('findings_summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_points_collected', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('models_tested', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('comparisons_completed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('analysis_depth_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('confidence_level', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('peer_review_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('supervisor_approval', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('data_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='research_progress_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='research_progress_pkey')
    )
    op.create_table('templates',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('template_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('language', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('academic_domain', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('prompt_template', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('post_processing_rules', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('vocabulary_hints', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('format_specifications', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('success_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('average_improvement', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('research_applications', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('recommended_for', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('limitations', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_by_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_by_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('updated_by_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name='templates_created_by_id_fkey'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], name='templates_created_by_user_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.id'], name='templates_updated_by_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='templates_pkey')
    )
    op.create_table('system_analytics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('total_users', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('active_users', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('new_users', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('verified_users', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_transcriptions', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('successful_transcriptions', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('failed_transcriptions', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_processing_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_audio_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('whisper_usage', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('wav2vec_usage', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('comparison_usage', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('average_whisper_wer', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('average_wav2vec_wer', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('voice_notes_created', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('research_exports', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('academic_reports_generated', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('average_response_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('system_uptime_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('peak_concurrent_users', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('greek_transcription_accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('diacritic_accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('morphology_accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('error_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('error_types', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('data_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='system_analytics_pkey'),
    sa.UniqueConstraint('date', name='system_analytics_date_key')
    )
    # ### end Alembic commands ###
